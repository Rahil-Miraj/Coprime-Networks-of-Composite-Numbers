import networkx as nx
import numpy as np
# import matplotlib.pyplot as plt

def coprime_network_composite(n):
    P = nx.Graph()
    for i in range (4,n+1):
        for t in range (2,int(np.sqrt(i))+1):
            if i%t==0:
                P.add_nodes_from([i])
                for j in range (1,i):
                    for s in range (2,int(np.sqrt(j))+1):
                        if j%s==0:
                            if np.gcd(i,j)==1:
                                P.add_edges_from ([(j,i)])
                                break
                break
    return P
def pi(n):
    if n==1:
        return 0
    elif n==2:
        return 0
    else:
        x=0
        for i in range (4,n):
            for t in range (2,int(np.sqrt(i))+2):
                if i%t==0:
                    break
                elif t==int(np.sqrt(i))+1:
                    x+=1
        return (x+2)  #pi(n)=x+2

# N1=[]
m1=[]
# d1=[]
a=[]
b=[]
c=[]

for i in range (1,101):
    n=100*i
    N=n-pi(n)-1
    
    P=coprime_network_composite(n)

    m=nx.number_of_edges(P)
    d=2*m/N
#     k=d
    if d-int(d)>=0.5:
        d=int(d)+1
    else:
        d=int(d)
    Q=nx.gnm_random_graph(N, m)
    R=nx.barabasi_albert_graph(N, d)
    
    x=nx.laplacian_spectrum(P)
    y=nx.laplacian_spectrum(Q)
    z=nx.laplacian_spectrum(R)
    
    print(n)
    
#     N1.append(N)
    m1.append(m)
#     d1.append(k)
    a.append(x[N-1]/x[1])
    b.append(y[N-1]/y[1])
    c.append(z[N-1]/z[1])
    
np.savetxt('Rahil_laplacian_spectrum_ratio1.txt',a)
np.savetxt('Rahil_laplacian_spectrum_ratio2.txt',b)
np.savetxt('Rahil_laplacian_spectrum_ratio3.txt',c)
np.savetxt('Rahil_egdes.txt',m1)